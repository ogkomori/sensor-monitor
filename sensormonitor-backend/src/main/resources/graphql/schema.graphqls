type SensorReading {
    sensorId: ID!
    location: String
    temperature: Float
    humidity: Int
    timestamp: String
}

type EnrichedSensorReading {
    sensorId: ID!
    location: String
    temperature: Float
    humidity: Int
    timestamp: String
    heatIndex: Float
    status: String
    message: String
}

type AggregateData {
    sensorId: ID!
    avgTemperature: Float
    minTemperature: Float
    maxTemperature: Float
    avgHumidity: Float
    minHumidity: Float
    maxHumidity: Float
    count: Int
}

type Query {
    # Latest reading for a sensor
    latestReadings(sensorId: ID!, limit: Int = 5): [EnrichedSensorReading]

    # Aggregate stats for a sensor
    aggregateStats(sensorId: ID!): AggregateData

    # Last N alerts for a sensor
    lastAlerts(sensorId: ID!, limit: Int = 5): [EnrichedSensorReading]
}

type Subscription {
    alertStream(sensorId: ID!): EnrichedSensorReading

    aggregateStream(sensorId: ID!): AggregateData

    latestReadingStream(sensorId: ID!): EnrichedSensorReading
}